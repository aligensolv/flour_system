{"level":"error","message":"server is not defined","timestamp":"2024-07-09 13:26:17"}
{"level":"error","message":"server is not defined","timestamp":"2024-07-09 13:26:26"}
{"level":"error","message":"\nInvalid `prisma.client.update()` invocation:\n\n{\n  where: {\n    id: \"1\"\n        ~~~\n  },\n  data: {\n    deleted_at: \"09-07-2024 17:19\"\n  }\n}\n\nArgument `id`: Invalid value provided. Expected Int, provided String.","timestamp":"2024-07-09 17:19:32"}
{"level":"error","message":"\nInvalid `prisma.client.update()` invocation:\n\n{\n  where: {\n    id: \"1\"\n        ~~~\n  },\n  data: {\n    deleted_at: \"09-07-2024 17:19\"\n  }\n}\n\nArgument `id`: Invalid value provided. Expected Int, provided String.","timestamp":"2024-07-09 17:19:32"}
{"level":"error","message":"\nInvalid `prisma.note.findMany()` invocation:\n\n{\n  where: {\n    deleted_at: null,\n    ~~~~~~~~~~\n?   AND?: NoteWhereInput | NoteWhereInput[],\n?   OR?: NoteWhereInput[],\n?   NOT?: NoteWhereInput | NoteWhereInput[],\n?   id?: IntFilter | Int,\n?   title?: StringFilter | String,\n?   content?: StringFilter | String,\n?   created_at?: StringFilter | String\n  }\n}\n\nUnknown argument `deleted_at`. Available options are marked with ?.","timestamp":"2024-07-10 04:46:36"}
{"level":"error","message":"\nInvalid `prisma.note.findMany()` invocation:\n\n{\n  where: {\n    deleted_at: null,\n    ~~~~~~~~~~\n?   AND?: NoteWhereInput | NoteWhereInput[],\n?   OR?: NoteWhereInput[],\n?   NOT?: NoteWhereInput | NoteWhereInput[],\n?   id?: IntFilter | Int,\n?   title?: StringFilter | String,\n?   content?: StringFilter | String,\n?   created_at?: StringFilter | String\n  }\n}\n\nUnknown argument `deleted_at`. Available options are marked with ?.","timestamp":"2024-07-10 04:46:36"}
{"level":"error","message":"\nInvalid `prisma.note.findMany()` invocation:\n\n{\n  where: {\n    deleted_at: null,\n    ~~~~~~~~~~\n?   AND?: NoteWhereInput | NoteWhereInput[],\n?   OR?: NoteWhereInput[],\n?   NOT?: NoteWhereInput | NoteWhereInput[],\n?   id?: IntFilter | Int,\n?   title?: StringFilter | String,\n?   content?: StringFilter | String,\n?   created_at?: StringFilter | String\n  }\n}\n\nUnknown argument `deleted_at`. Available options are marked with ?.","timestamp":"2024-07-10 04:46:47"}
{"level":"error","message":"\nInvalid `prisma.note.findMany()` invocation:\n\n{\n  where: {\n    deleted_at: null,\n    ~~~~~~~~~~\n?   AND?: NoteWhereInput | NoteWhereInput[],\n?   OR?: NoteWhereInput[],\n?   NOT?: NoteWhereInput | NoteWhereInput[],\n?   id?: IntFilter | Int,\n?   title?: StringFilter | String,\n?   content?: StringFilter | String,\n?   created_at?: StringFilter | String\n  }\n}\n\nUnknown argument `deleted_at`. Available options are marked with ?.","timestamp":"2024-07-10 04:46:47"}
{"level":"error","message":"\nInvalid `prisma.note.findMany()` invocation:\n\n{\n  where: {\n    deleted_at: null,\n    ~~~~~~~~~~\n?   AND?: NoteWhereInput | NoteWhereInput[],\n?   OR?: NoteWhereInput[],\n?   NOT?: NoteWhereInput | NoteWhereInput[],\n?   id?: IntFilter | Int,\n?   title?: StringFilter | String,\n?   content?: StringFilter | String,\n?   created_at?: StringFilter | String\n  }\n}\n\nUnknown argument `deleted_at`. Available options are marked with ?.","timestamp":"2024-07-10 04:47:04"}
{"level":"error","message":"\nInvalid `prisma.note.findMany()` invocation:\n\n{\n  where: {\n    deleted_at: null,\n    ~~~~~~~~~~\n?   AND?: NoteWhereInput | NoteWhereInput[],\n?   OR?: NoteWhereInput[],\n?   NOT?: NoteWhereInput | NoteWhereInput[],\n?   id?: IntFilter | Int,\n?   title?: StringFilter | String,\n?   content?: StringFilter | String,\n?   created_at?: StringFilter | String\n  }\n}\n\nUnknown argument `deleted_at`. Available options are marked with ?.","timestamp":"2024-07-10 04:47:04"}
{"level":"error","message":"DateTimeRepository is not defined","timestamp":"2024-07-10 04:49:16"}
{"level":"error","message":"DateTimeRepository is not defined","timestamp":"2024-07-10 04:49:16"}
{"level":"error","message":"\nInvalid `prisma.note.update()` invocation:\n\n{\n  where: {\n    id: \"1\"\n        ~~~\n  },\n  data: {\n    deleted_at: \"10-07-2024 05:03\"\n  }\n}\n\nArgument `id`: Invalid value provided. Expected Int, provided String.","timestamp":"2024-07-10 05:03:05"}
{"level":"error","message":"\nInvalid `prisma.note.update()` invocation:\n\n{\n  where: {\n    id: \"1\"\n        ~~~\n  },\n  data: {\n    deleted_at: \"10-07-2024 05:03\"\n  }\n}\n\nArgument `id`: Invalid value provided. Expected Int, provided String.","timestamp":"2024-07-10 05:03:05"}
{"level":"error","message":"\nInvalid `prisma.client.update()` invocation:\n\n{\n  where: {\n    id: \"1\"\n        ~~~\n  },\n  data: {\n    name: \"احمد طارق\",\n    address: \"5 شارع عزبة النخل\",\n    phone_number: \"01289492689\",\n    shop_name: \"الحواج\"\n  }\n}\n\nArgument `id`: Invalid value provided. Expected Int, provided String.","timestamp":"2024-07-10 05:26:20"}
{"level":"error","message":"\nInvalid `prisma.client.update()` invocation:\n\n{\n  where: {\n    id: \"1\"\n        ~~~\n  },\n  data: {\n    name: \"احمد طارق\",\n    address: \"5 شارع عزبة النخل\",\n    phone_number: \"01289492689\",\n    shop_name: \"الحواج\"\n  }\n}\n\nArgument `id`: Invalid value provided. Expected Int, provided String.","timestamp":"2024-07-10 05:26:20"}
{"level":"error","message":"OK is not defined","timestamp":"2024-07-10 05:44:12"}
{"level":"error","message":"OK is not defined","timestamp":"2024-07-10 05:44:12"}
{"level":"error","message":"ENOENT: no such file or directory, open './data/flours.json'","timestamp":"2024-07-14 00:17:51"}
{"level":"error","message":"ENOENT: no such file or directory, open './data/flours.json'","timestamp":"2024-07-14 00:17:51"}
{"level":"error","message":"ENOENT: no such file or directory, open './data/flours.json'","timestamp":"2024-07-14 00:20:29"}
{"level":"error","message":"ENOENT: no such file or directory, open './data/flours.json'","timestamp":"2024-07-14 00:20:29"}
{"level":"error","message":"fs is not defined","timestamp":"2024-07-14 00:23:12"}
{"level":"error","message":"fs is not defined","timestamp":"2024-07-14 00:23:12"}
{"level":"error","message":"\nInvalid `prisma.flour.update()` invocation:\n\n{\n  where: {\n+   id: Int\n  },\n  data: {\n    stock: undefined,\n    unit_price: undefined\n  }\n}\n\nArgument `id` is missing.","timestamp":"2024-07-14 00:27:04"}
{"level":"error","message":"\nInvalid `prisma.flour.update()` invocation:\n\n{\n  where: {\n+   id: Int\n  },\n  data: {\n    stock: undefined,\n    unit_price: undefined\n  }\n}\n\nArgument `id` is missing.","timestamp":"2024-07-14 00:27:04"}
{"level":"error","message":"flours is not defined","timestamp":"2024-07-14 00:27:20"}
{"level":"error","message":"flours is not defined","timestamp":"2024-07-14 00:27:20"}
{"level":"error","message":[{"error":"quantity cannot be null or empty","field":"quantity"},{"error":"unit_price cannot be null or empty","field":"unit_price"}],"timestamp":"2024-07-14 00:29:09"}
{"level":"error","message":[{"error":"quantity cannot be null or empty","field":"quantity"},{"error":"unit_price cannot be null or empty","field":"unit_price"}],"timestamp":"2024-07-14 00:29:09"}
{"level":"error","message":"\nInvalid `prisma.flour.update()` invocation:\n\n{\n  where: {\n    id: 21\n  },\n  data: {\n    stock: \"17\",\n           ~~~~\n    unit_price: \"10\"\n  }\n}\n\nArgument `stock`: Invalid value provided. Expected Int or IntFieldUpdateOperationsInput, provided String.","timestamp":"2024-07-14 00:29:55"}
{"level":"error","message":"\nInvalid `prisma.flour.update()` invocation:\n\n{\n  where: {\n    id: 21\n  },\n  data: {\n    stock: \"17\",\n           ~~~~\n    unit_price: \"10\"\n  }\n}\n\nArgument `stock`: Invalid value provided. Expected Int or IntFieldUpdateOperationsInput, provided String.","timestamp":"2024-07-14 00:29:55"}
{"level":"error","message":[{"error":"price cannot be null or empty","field":"price"}],"timestamp":"2024-07-14 00:32:14"}
{"level":"error","message":[{"error":"price cannot be null or empty","field":"price"}],"timestamp":"2024-07-14 00:32:14"}
{"level":"error","message":"\nInvalid `prisma.flour.update()` invocation:\n\n{\n  where: {\n    id: 21\n  },\n  data: {\n    price: 71,\n    ~~~~~\n?   name?: String | StringFieldUpdateOperationsInput,\n?   stock?: Int | IntFieldUpdateOperationsInput,\n?   unit_price?: Float | FloatFieldUpdateOperationsInput,\n?   storageOuts?: StorageOutUpdateManyWithoutFlourNestedInput\n  }\n}\n\nUnknown argument `price`. Available options are marked with ?.","timestamp":"2024-07-14 00:32:25"}
{"level":"error","message":"\nInvalid `prisma.flour.update()` invocation:\n\n{\n  where: {\n    id: 21\n  },\n  data: {\n    price: 71,\n    ~~~~~\n?   name?: String | StringFieldUpdateOperationsInput,\n?   stock?: Int | IntFieldUpdateOperationsInput,\n?   unit_price?: Float | FloatFieldUpdateOperationsInput,\n?   storageOuts?: StorageOutUpdateManyWithoutFlourNestedInput\n  }\n}\n\nUnknown argument `price`. Available options are marked with ?.","timestamp":"2024-07-14 00:32:25"}
{"level":"error","message":"\nInvalid `prisma.flour.update()` invocation:\n\n{\n  where: {\n    id: 21\n  },\n  data: {\n    price: 71,\n    ~~~~~\n?   name?: String | StringFieldUpdateOperationsInput,\n?   stock?: Int | IntFieldUpdateOperationsInput,\n?   unit_price?: Float | FloatFieldUpdateOperationsInput,\n?   storageOuts?: StorageOutUpdateManyWithoutFlourNestedInput\n  }\n}\n\nUnknown argument `price`. Available options are marked with ?.","timestamp":"2024-07-14 00:33:18"}
{"level":"error","message":"\nInvalid `prisma.flour.update()` invocation:\n\n{\n  where: {\n    id: 21\n  },\n  data: {\n    price: 71,\n    ~~~~~\n?   name?: String | StringFieldUpdateOperationsInput,\n?   stock?: Int | IntFieldUpdateOperationsInput,\n?   unit_price?: Float | FloatFieldUpdateOperationsInput,\n?   storageOuts?: StorageOutUpdateManyWithoutFlourNestedInput\n  }\n}\n\nUnknown argument `price`. Available options are marked with ?.","timestamp":"2024-07-14 00:33:18"}
{"level":"error","message":"promiseAsyncWrapper is not defined","timestamp":"2024-07-14 00:37:44"}
{"level":"error","message":"promiseAsyncWrapper is not defined","timestamp":"2024-07-14 00:37:44"}
{"level":"error","message":"OK is not defined","timestamp":"2024-07-14 00:37:56"}
{"level":"error","message":"OK is not defined","timestamp":"2024-07-14 00:37:56"}
{"level":"error","message":"\nInvalid `prisma.payment.create()` invocation:\n\n{\n  data: {\n    amount: NaN,\n    note: undefined,\n    client_id: undefined,\n    sale_id: undefined,\n+   paid_at: String\n  }\n}\n\nArgument `paid_at` is missing.","timestamp":"2024-07-14 00:41:06"}
{"level":"error","message":"\nInvalid `prisma.payment.create()` invocation:\n\n{\n  data: {\n    amount: NaN,\n    note: undefined,\n    client_id: undefined,\n    sale_id: undefined,\n+   paid_at: String\n  }\n}\n\nArgument `paid_at` is missing.","timestamp":"2024-07-14 00:41:06"}
{"level":"error","message":[{"error":"amount cannot be null or empty","field":"amount"},{"error":"client_id cannot be null or empty","field":"client_id"}],"timestamp":"2024-07-14 00:41:34"}
{"level":"error","message":[{"error":"amount cannot be null or empty","field":"amount"},{"error":"client_id cannot be null or empty","field":"client_id"}],"timestamp":"2024-07-14 00:41:34"}
{"level":"error","message":"\nInvalid `prisma.payment.create()` invocation:\n\n{\n  data: {\n    amount: 20,\n    note: undefined,\n    client_id: \"42\",\n    sale_id: undefined,\n+   paid_at: String\n  }\n}\n\nArgument `paid_at` is missing.","timestamp":"2024-07-14 00:42:02"}
{"level":"error","message":"\nInvalid `prisma.payment.create()` invocation:\n\n{\n  data: {\n    amount: 20,\n    note: undefined,\n    client_id: \"42\",\n    sale_id: undefined,\n+   paid_at: String\n  }\n}\n\nArgument `paid_at` is missing.","timestamp":"2024-07-14 00:42:02"}
{"level":"error","message":"\nInvalid `prisma.payment.create()` invocation:\n\n{\n  data: {\n    amount: 20,\n    note: undefined,\n    client_id: \"42\",\n    sale_id: undefined,\n+   paid_at: String\n  }\n}\n\nArgument `paid_at` is missing.","timestamp":"2024-07-14 00:42:35"}
{"level":"error","message":"\nInvalid `prisma.payment.create()` invocation:\n\n{\n  data: {\n    amount: 20,\n    note: undefined,\n    client_id: \"42\",\n    sale_id: undefined,\n+   paid_at: String\n  }\n}\n\nArgument `paid_at` is missing.","timestamp":"2024-07-14 00:42:35"}
{"level":"error","message":"\nInvalid `prisma.payment.create()` invocation:\n\n{\n  data: {\n    amount: 20,\n    note: undefined,\n    client_id: \"42\",\n    sale_id: undefined,\n+   paid_at: String\n  }\n}\n\nArgument `paid_at` is missing.","timestamp":"2024-07-14 00:42:43"}
{"level":"error","message":"\nInvalid `prisma.payment.create()` invocation:\n\n{\n  data: {\n    amount: 20,\n    note: undefined,\n    client_id: \"42\",\n    sale_id: undefined,\n+   paid_at: String\n  }\n}\n\nArgument `paid_at` is missing.","timestamp":"2024-07-14 00:42:43"}
{"level":"error","message":"\nInvalid `prisma.payment.create()` invocation:\n\n{\n  data: {\n    amount: 20,\n    note: undefined,\n    client_id: \"42\",\n               ~~~~\n    sale_id: undefined,\n    paid_at: \"14-07-2024 00:43\"\n  }\n}\n\nArgument `client_id`: Invalid value provided. Expected Int, provided String.","timestamp":"2024-07-14 00:43:02"}
{"level":"error","message":"\nInvalid `prisma.payment.create()` invocation:\n\n{\n  data: {\n    amount: 20,\n    note: undefined,\n    client_id: \"42\",\n               ~~~~\n    sale_id: undefined,\n    paid_at: \"14-07-2024 00:43\"\n  }\n}\n\nArgument `client_id`: Invalid value provided. Expected Int, provided String.","timestamp":"2024-07-14 00:43:02"}
{"level":"error","message":"\nInvalid `prisma.payment.findMany()` invocation:\n\n{\n  where: {\n    client_id: 42\n  },\n  select: {\n  ~~~~~~\n    id: true\n  },\n  include: {\n  ~~~~~~~\n    sale: true\n  }\n}\n\nPlease either use `include` or `select`, but not both at the same time.","timestamp":"2024-07-14 00:47:02"}
{"level":"error","message":"\nInvalid `prisma.payment.findMany()` invocation:\n\n{\n  where: {\n    client_id: 42\n  },\n  select: {\n  ~~~~~~\n    id: true\n  },\n  include: {\n  ~~~~~~~\n    sale: true\n  }\n}\n\nPlease either use `include` or `select`, but not both at the same time.","timestamp":"2024-07-14 00:47:02"}
{"level":"error","message":"promiseAsyncWrapper is not defined","timestamp":"2024-07-14 00:54:53"}
{"level":"error","message":"promiseAsyncWrapper is not defined","timestamp":"2024-07-14 00:54:53"}
{"level":"error","message":"\nInvalid `prisma.sale.findMany()` invocation:\n\n{\n  where: {\n+   client_id: {\n+     equals: Int | IntFieldRefInput,\n+     in: Int[],\n+     notIn: Int[],\n+     lt: Int | IntFieldRefInput,\n+     lte: Int | IntFieldRefInput,\n+     gt: Int | IntFieldRefInput,\n+     gte: Int | IntFieldRefInput,\n+     not: Int | NestedIntFilter\n+   }\n  },\n  include: {\n    client: true\n  }\n}\n\nArgument `client_id` is missing.","timestamp":"2024-07-14 00:55:50"}
{"level":"error","message":"\nInvalid `prisma.sale.findMany()` invocation:\n\n{\n  where: {\n+   client_id: {\n+     equals: Int | IntFieldRefInput,\n+     in: Int[],\n+     notIn: Int[],\n+     lt: Int | IntFieldRefInput,\n+     lte: Int | IntFieldRefInput,\n+     gt: Int | IntFieldRefInput,\n+     gte: Int | IntFieldRefInput,\n+     not: Int | NestedIntFilter\n+   }\n  },\n  include: {\n    client: true\n  }\n}\n\nArgument `client_id` is missing.","timestamp":"2024-07-14 00:55:50"}
{"level":"error","message":"\nInvalid `prisma.sale.findMany()` invocation:\n\n{\n  where: {\n+   client_id: {\n+     equals: Int | IntFieldRefInput,\n+     in: Int[],\n+     notIn: Int[],\n+     lt: Int | IntFieldRefInput,\n+     lte: Int | IntFieldRefInput,\n+     gt: Int | IntFieldRefInput,\n+     gte: Int | IntFieldRefInput,\n+     not: Int | NestedIntFilter\n+   }\n  },\n  include: {\n    client: true\n  }\n}\n\nArgument `client_id` is missing.","timestamp":"2024-07-14 00:56:10"}
{"level":"error","message":"\nInvalid `prisma.sale.findMany()` invocation:\n\n{\n  where: {\n+   client_id: {\n+     equals: Int | IntFieldRefInput,\n+     in: Int[],\n+     notIn: Int[],\n+     lt: Int | IntFieldRefInput,\n+     lte: Int | IntFieldRefInput,\n+     gt: Int | IntFieldRefInput,\n+     gte: Int | IntFieldRefInput,\n+     not: Int | NestedIntFilter\n+   }\n  },\n  include: {\n    client: true\n  }\n}\n\nArgument `client_id` is missing.","timestamp":"2024-07-14 00:56:10"}
{"level":"error","message":[{"error":"storage_outs cannot be null or empty","field":"storage_outs"},{"error":"client_id cannot be null or empty","field":"client_id"},{"error":"expense_amount cannot be null or empty","field":"expense_amount"}],"timestamp":"2024-07-14 01:05:32"}
{"level":"error","message":[{"error":"storage_outs cannot be null or empty","field":"storage_outs"},{"error":"client_id cannot be null or empty","field":"client_id"},{"error":"expense_amount cannot be null or empty","field":"expense_amount"}],"timestamp":"2024-07-14 01:05:32"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: [],\n                  ~~\n    notes: undefined,\n    client_id: \"42\",\n    created_at: \"14-07-2024 01:06\",\n    total_charge: 0,\n    new_client_debt: 0,\n    expense: {\n      connect: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق\",\n        created_at: \"14-07-2024 01:06\"\n      }\n    }\n  }\n}\n\nArgument `storage_outs`: Invalid value provided. Expected StorageOutUncheckedCreateNestedManyWithoutSaleInput, provided ().","timestamp":"2024-07-14 01:06:06"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: [],\n                  ~~\n    notes: undefined,\n    client_id: \"42\",\n    created_at: \"14-07-2024 01:06\",\n    total_charge: 0,\n    new_client_debt: 0,\n    expense: {\n      connect: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق\",\n        created_at: \"14-07-2024 01:06\"\n      }\n    }\n  }\n}\n\nArgument `storage_outs`: Invalid value provided. Expected StorageOutUncheckedCreateNestedManyWithoutSaleInput, provided ().","timestamp":"2024-07-14 01:06:06"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: []\n    },\n    notes: undefined,\n    client_id: \"42\",\n               ~~~~\n    created_at: \"14-07-2024 01:06\",\n    total_charge: 0,\n    new_client_debt: 0,\n    expense: {\n      connect: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق\",\n        created_at: \"14-07-2024 01:06\"\n      }\n    }\n  }\n}\n\nArgument `client_id`: Invalid value provided. Expected Int, provided String.","timestamp":"2024-07-14 01:06:35"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: []\n    },\n    notes: undefined,\n    client_id: \"42\",\n               ~~~~\n    created_at: \"14-07-2024 01:06\",\n    total_charge: 0,\n    new_client_debt: 0,\n    expense: {\n      connect: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق\",\n        created_at: \"14-07-2024 01:06\"\n      }\n    }\n  }\n}\n\nArgument `client_id`: Invalid value provided. Expected Int, provided String.","timestamp":"2024-07-14 01:06:35"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: []\n    },\n    notes: undefined,\n    client_id: 42,\n    created_at: \"14-07-2024 01:06\",\n    total_charge: 0,\n    new_client_debt: 0,\n    expense: {\n      connect: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق\",\n        created_at: \"14-07-2024 01:06\",\n?       id?: Int,\n?       sale_id?: Int,\n?       AND?: ExpenseWhereInput | ExpenseWhereInput[],\n?       OR?: ExpenseWhereInput[],\n?       NOT?: ExpenseWhereInput | ExpenseWhereInput[],\n?       note?: StringNullableFilter | String | Null,\n?       sale?: SaleNullableRelationFilter | SaleWhereInput | Null\n      }\n    }\n  }\n}\n\nArgument `connect` of type ExpenseWhereUniqueInput needs at least one of `id` or `sale_id` arguments. Available options are marked with ?.","timestamp":"2024-07-14 01:06:47"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: []\n    },\n    notes: undefined,\n    client_id: 42,\n    created_at: \"14-07-2024 01:06\",\n    total_charge: 0,\n    new_client_debt: 0,\n    expense: {\n      connect: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق\",\n        created_at: \"14-07-2024 01:06\",\n?       id?: Int,\n?       sale_id?: Int,\n?       AND?: ExpenseWhereInput | ExpenseWhereInput[],\n?       OR?: ExpenseWhereInput[],\n?       NOT?: ExpenseWhereInput | ExpenseWhereInput[],\n?       note?: StringNullableFilter | String | Null,\n?       sale?: SaleNullableRelationFilter | SaleWhereInput | Null\n      }\n    }\n  }\n}\n\nArgument `connect` of type ExpenseWhereUniqueInput needs at least one of `id` or `sale_id` arguments. Available options are marked with ?.","timestamp":"2024-07-14 01:06:47"}
{"level":"error","message":"\nInvalid `prisma.sale.findMany()` invocation:\n\n{\n  include: {\n    client: true,\n    expense: {\n      include: {\n        client: true,\n        ~~~~~~\n?       sale?: true\n      }\n    },\n    client_id: false\n  }\n}\n\nUnknown field `client` for include statement on model `Expense`. Available options are marked with ?.","timestamp":"2024-07-14 01:08:43"}
{"level":"error","message":"\nInvalid `prisma.sale.findMany()` invocation:\n\n{\n  include: {\n    client: true,\n    expense: {\n      include: {\n        client: true,\n        ~~~~~~\n?       sale?: true\n      }\n    },\n    client_id: false\n  }\n}\n\nUnknown field `client` for include statement on model `Expense`. Available options are marked with ?.","timestamp":"2024-07-14 01:08:43"}
{"level":"error","message":"promiseAsyncWrapper is not defined","timestamp":"2024-07-14 01:26:31"}
{"level":"error","message":"promiseAsyncWrapper is not defined","timestamp":"2024-07-14 01:26:31"}
{"level":"error","message":"\nInvalid `prisma.expense.findMany()` invocation:\n\n{\n  include: {\n    client: true,\n    ~~~~~~\n?   sale?: true\n  }\n}\n\nUnknown field `client` for include statement on model `Expense`. Available options are marked with ?.","timestamp":"2024-07-14 01:27:02"}
{"level":"error","message":"\nInvalid `prisma.expense.findMany()` invocation:\n\n{\n  include: {\n    client: true,\n    ~~~~~~\n?   sale?: true\n  }\n}\n\nUnknown field `client` for include statement on model `Expense`. Available options are marked with ?.","timestamp":"2024-07-14 01:27:02"}
{"level":"error","message":[{"error":"total_amount cannot be null or empty","field":"total_amount"},{"error":"reason cannot be null or empty","field":"reason"}],"timestamp":"2024-07-14 01:32:01"}
{"level":"error","message":[{"error":"total_amount cannot be null or empty","field":"total_amount"},{"error":"reason cannot be null or empty","field":"reason"}],"timestamp":"2024-07-14 01:32:01"}
{"level":"error","message":[{"error":"username cannot be null or empty","field":"username"},{"error":"password cannot be null or empty","field":"password"}],"timestamp":"2024-07-14 19:52:08"}
{"level":"error","message":[{"error":"username cannot be null or empty","field":"username"},{"error":"password cannot be null or empty","field":"password"}],"timestamp":"2024-07-14 19:52:08"}
{"level":"error","message":"Auth is not defined","timestamp":"2024-07-14 19:52:29"}
{"level":"error","message":"Auth is not defined","timestamp":"2024-07-14 19:52:29"}
{"level":"error","message":"promiseAsyncWrapper is not defined","timestamp":"2024-07-14 19:52:42"}
{"level":"error","message":"promiseAsyncWrapper is not defined","timestamp":"2024-07-14 19:52:42"}
{"level":"error","message":"Wrong password","timestamp":"2024-07-14 19:52:49"}
{"level":"error","message":"Wrong password","timestamp":"2024-07-14 19:52:49"}
{"level":"error","message":"Manager with username ahmedx not found.","timestamp":"2024-07-14 19:52:58"}
{"level":"error","message":"Manager with username ahmedx not found.","timestamp":"2024-07-14 19:52:58"}
{"0":"2","1":"5","10":"O","11":"k","12":":","13":" ","14":"q","15":"u","16":"e","17":"u","18":"e","19":"d","2":"0","20":" ","21":"a","22":"s","23":" ","24":"4","25":"W","26":"M","27":"W","28":"s","29":"m","3":" ","30":"3","31":"D","32":"Q","33":"W","34":"z","35":"1","36":"G","37":"g","38":"B","39":"k","4":"2","5":".","6":"0","7":".","8":"0","9":" ","level":"info","message":"Email sent:","timestamp":"2024-07-14 20:05:01"}
{"0":"2","1":"5","10":"O","11":"k","12":":","13":" ","14":"q","15":"u","16":"e","17":"u","18":"e","19":"d","2":"0","20":" ","21":"a","22":"s","23":" ","24":"4","25":"W","26":"M","27":"X","28":"C","29":"s","3":" ","30":"0","31":"d","32":"5","33":"9","34":"z","35":"1","36":"G","37":"T","38":"f","39":"q","4":"2","5":".","6":"0","7":".","8":"0","9":" ","level":"info","message":"Email sent:","timestamp":"2024-07-14 20:20:41"}
{"0":"2","1":"5","10":"O","11":"k","12":":","13":" ","14":"q","15":"u","16":"e","17":"u","18":"e","19":"d","2":"0","20":" ","21":"a","22":"s","23":" ","24":"4","25":"W","26":"M","27":"X","28":"D","29":"w","3":" ","30":"7","31":"3","32":"K","33":"R","34":"z","35":"K","36":"L","37":"L","38":"4","39":"j","4":"2","5":".","6":"0","7":".","8":"0","9":" ","level":"info","message":"Email sent:","timestamp":"2024-07-14 20:21:37"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: [\n        {\n          quantity: 10,\n          created_at: \"14-07-2024 20:38\",\n          flour_id: 13,\n          client_id: 13,\n          total_out_price: 800,\n          unit_sell_price: 60\n        },\n        {\n          quantity: 20,\n          created_at: \"14-07-2024 20:38\",\n          flour_id: 14,\n          client_id: 13,\n          total_out_price: 300,\n          unit_sell_price: 13\n        }\n      ]\n    },\n    notes: undefined,\n    client_id: 13,\n    created_at: \"14-07-2024 20:38\",\n    total_charge: 0,\n    new_client_debt: 0,\n    expense: {\n      create: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق\",\n        created_at: \"14-07-2024 20:38\"\n      }\n    },\n+   previous_client_debt: Float\n  }\n}\n\nArgument `previous_client_debt` is missing.","timestamp":"2024-07-14 20:38:23"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: [\n        {\n          quantity: 10,\n          created_at: \"14-07-2024 20:38\",\n          flour_id: 13,\n          client_id: 13,\n          total_out_price: 800,\n          unit_sell_price: 60\n        },\n        {\n          quantity: 20,\n          created_at: \"14-07-2024 20:38\",\n          flour_id: 14,\n          client_id: 13,\n          total_out_price: 300,\n          unit_sell_price: 13\n        }\n      ]\n    },\n    notes: undefined,\n    client_id: 13,\n    created_at: \"14-07-2024 20:38\",\n    total_charge: 0,\n    new_client_debt: 0,\n    expense: {\n      create: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق\",\n        created_at: \"14-07-2024 20:38\"\n      }\n    },\n+   previous_client_debt: Float\n  }\n}\n\nArgument `previous_client_debt` is missing.","timestamp":"2024-07-14 20:38:23"}
{"level":"error","message":[{"error":"username cannot be null or empty","field":"username"},{"error":"password cannot be null or empty","field":"password"}],"timestamp":"2024-07-17 03:12:07"}
{"level":"error","message":[{"error":"username cannot be null or empty","field":"username"},{"error":"password cannot be null or empty","field":"password"}],"timestamp":"2024-07-17 03:12:07"}
{"level":"error","message":"\nInvalid `prisma.expense.findMany()` invocation:\n\n{\n  include: {\n    sale_id: true,\n    ~~~~~~~\n    sale: true,\n?   sale?: true\n  }\n}\n\nInvalid scalar field `sale_id` for include statement on model Expense. Available options are marked with ?.\nNote that include statements only accept relation fields.","timestamp":"2024-07-17 03:47:27"}
{"level":"error","message":"\nInvalid `prisma.expense.findMany()` invocation:\n\n{\n  include: {\n    sale_id: true,\n    ~~~~~~~\n    sale: true,\n?   sale?: true\n  }\n}\n\nInvalid scalar field `sale_id` for include statement on model Expense. Available options are marked with ?.\nNote that include statements only accept relation fields.","timestamp":"2024-07-17 03:47:27"}
{"level":"error","message":"\nInvalid `prisma.sale.findMany()` invocation:\n\n{\n  include: {\n    client: true,\n    expense: {\n      include: {\n        sale_id: false\n      }\n    },\n    client_id: false,\n    incomes: true,\n    ~~~~~~~\n    payments: true,\n    storage_outs: {\n      include: {\n        flour_id: false,\n        flour: true,\n        client_id: false,\n        client: false,\n        sale: false,\n        sale_id: false\n      }\n    },\n?   payment?: true,\n?   income?: true\n  }\n}\n\nUnknown field `incomes` for include statement on model `Sale`. Available options are marked with ?.","timestamp":"2024-07-17 04:18:32"}
{"level":"error","message":"\nInvalid `prisma.sale.findMany()` invocation:\n\n{\n  include: {\n    client: true,\n    expense: {\n      include: {\n        sale_id: false\n      }\n    },\n    client_id: false,\n    incomes: true,\n    ~~~~~~~\n    payments: true,\n    storage_outs: {\n      include: {\n        flour_id: false,\n        flour: true,\n        client_id: false,\n        client: false,\n        sale: false,\n        sale_id: false\n      }\n    },\n?   payment?: true,\n?   income?: true\n  }\n}\n\nUnknown field `incomes` for include statement on model `Sale`. Available options are marked with ?.","timestamp":"2024-07-17 04:18:32"}
{"level":"error","message":"\nInvalid `prisma.sale.findMany()` invocation:\n\n{\n  include: {\n    client: true,\n    expense: {\n      include: {\n        sale_id: false\n      }\n    },\n    client_id: false,\n    incomes: true,\n    ~~~~~~~\n    payments: true,\n    storage_outs: {\n      include: {\n        flour_id: false,\n        flour: true,\n        client_id: false,\n        client: false,\n        sale: false,\n        sale_id: false\n      }\n    },\n?   payment?: true,\n?   income?: true\n  }\n}\n\nUnknown field `incomes` for include statement on model `Sale`. Available options are marked with ?.","timestamp":"2024-07-17 04:22:11"}
{"level":"error","message":"\nInvalid `prisma.sale.findMany()` invocation:\n\n{\n  include: {\n    client: true,\n    expense: {\n      include: {\n        sale_id: false\n      }\n    },\n    client_id: false,\n    incomes: true,\n    ~~~~~~~\n    payments: true,\n    storage_outs: {\n      include: {\n        flour_id: false,\n        flour: true,\n        client_id: false,\n        client: false,\n        sale: false,\n        sale_id: false\n      }\n    },\n?   payment?: true,\n?   income?: true\n  }\n}\n\nUnknown field `incomes` for include statement on model `Sale`. Available options are marked with ?.","timestamp":"2024-07-17 04:22:11"}
{"level":"error","message":"storage_out is not defined","timestamp":"2024-07-17 04:23:14"}
{"level":"error","message":"storage_out is not defined","timestamp":"2024-07-17 04:23:14"}
{"level":"error","message":"\nInvalid `prisma.income.create()` invocation:\n\n{\n  data: {\n    sale_id: 2,\n    flour_id: undefined,\n    created_at: \"17-07-2024 04:24\",\n    profit: NaN,\n+   sale: {\n+     create: SaleCreateWithoutIncomeInput | SaleUncheckedCreateWithoutIncomeInput,\n+     connectOrCreate: SaleCreateOrConnectWithoutIncomeInput,\n+     connect: SaleWhereUniqueInput\n+   }\n  }\n}\n\nArgument `sale` is missing.","timestamp":"2024-07-17 04:24:13"}
{"level":"error","message":"\nInvalid `prisma.income.create()` invocation:\n\n{\n  data: {\n    sale_id: 2,\n    flour_id: undefined,\n    created_at: \"17-07-2024 04:24\",\n    profit: NaN,\n+   sale: {\n+     create: SaleCreateWithoutIncomeInput | SaleUncheckedCreateWithoutIncomeInput,\n+     connectOrCreate: SaleCreateOrConnectWithoutIncomeInput,\n+     connect: SaleWhereUniqueInput\n+   }\n  }\n}\n\nArgument `sale` is missing.","timestamp":"2024-07-17 04:24:13"}
{"level":"error","message":"Cannot access 'createdSale' before initialization","timestamp":"2024-07-17 04:24:57"}
{"level":"error","message":"Cannot access 'createdSale' before initialization","timestamp":"2024-07-17 04:24:57"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: [\n        {\n          quantity: 10,\n          created_at: \"17-07-2024 04:25\",\n          flour_id: 1,\n          client_id: 1,\n          total_out_price: 800,\n          unit_sell_price: 60\n        },\n        {\n          quantity: 20,\n          created_at: \"17-07-2024 04:25\",\n          flour_id: 2,\n          client_id: 1,\n          total_out_price: 300,\n          unit_sell_price: 13\n        }\n      ]\n    },\n    notes: undefined,\n    client_id: 1,\n    created_at: \"17-07-2024 04:25\",\n    total_charge: 0,\n    previous_client_debt: 10,\n    new_client_debt: 1110,\n    expense: {\n      create: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق\",\n        created_at: \"17-07-2024 04:25\"\n      }\n    },\n    income: {\n      create: {\n        flour_id: undefined,\n        created_at: \"17-07-2024 04:25\",\n        profit: NaN,\n+       flour: {\n+         create: FlourCreateWithoutIncomesInput | FlourUncheckedCreateWithoutIncomesInput,\n+         connectOrCreate: FlourCreateOrConnectWithoutIncomesInput,\n+         connect: FlourWhereUniqueInput\n+       }\n      }\n    }\n  }\n}\n\nArgument `flour` is missing.","timestamp":"2024-07-17 04:25:08"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: [\n        {\n          quantity: 10,\n          created_at: \"17-07-2024 04:25\",\n          flour_id: 1,\n          client_id: 1,\n          total_out_price: 800,\n          unit_sell_price: 60\n        },\n        {\n          quantity: 20,\n          created_at: \"17-07-2024 04:25\",\n          flour_id: 2,\n          client_id: 1,\n          total_out_price: 300,\n          unit_sell_price: 13\n        }\n      ]\n    },\n    notes: undefined,\n    client_id: 1,\n    created_at: \"17-07-2024 04:25\",\n    total_charge: 0,\n    previous_client_debt: 10,\n    new_client_debt: 1110,\n    expense: {\n      create: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق\",\n        created_at: \"17-07-2024 04:25\"\n      }\n    },\n    income: {\n      create: {\n        flour_id: undefined,\n        created_at: \"17-07-2024 04:25\",\n        profit: NaN,\n+       flour: {\n+         create: FlourCreateWithoutIncomesInput | FlourUncheckedCreateWithoutIncomesInput,\n+         connectOrCreate: FlourCreateOrConnectWithoutIncomesInput,\n+         connect: FlourWhereUniqueInput\n+       }\n      }\n    }\n  }\n}\n\nArgument `flour` is missing.","timestamp":"2024-07-17 04:25:08"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: [\n        {\n          quantity: 10,\n          created_at: \"17-07-2024 04:26\",\n          flour_id: 1,\n          client_id: 1,\n          total_out_price: 800,\n          unit_sell_price: 60\n        },\n        {\n          quantity: 20,\n          created_at: \"17-07-2024 04:26\",\n          flour_id: 2,\n          client_id: 1,\n          total_out_price: 300,\n          unit_sell_price: 13\n        }\n      ]\n    },\n    notes: undefined,\n    client_id: 1,\n    created_at: \"17-07-2024 04:26\",\n    total_charge: 0,\n    previous_client_debt: 10,\n    new_client_debt: 1110,\n    expense: {\n      create: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق\",\n        created_at: \"17-07-2024 04:26\"\n      }\n    },\n    income: {\n      create: {\n        flour_id: 1,\n        created_at: \"17-07-2024 04:26\",\n        profit: NaN,\n+       flour: {\n+         create: FlourCreateWithoutIncomesInput | FlourUncheckedCreateWithoutIncomesInput,\n+         connectOrCreate: FlourCreateOrConnectWithoutIncomesInput,\n+         connect: FlourWhereUniqueInput\n+       }\n      }\n    }\n  }\n}\n\nArgument `flour` is missing.","timestamp":"2024-07-17 04:26:00"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: [\n        {\n          quantity: 10,\n          created_at: \"17-07-2024 04:26\",\n          flour_id: 1,\n          client_id: 1,\n          total_out_price: 800,\n          unit_sell_price: 60\n        },\n        {\n          quantity: 20,\n          created_at: \"17-07-2024 04:26\",\n          flour_id: 2,\n          client_id: 1,\n          total_out_price: 300,\n          unit_sell_price: 13\n        }\n      ]\n    },\n    notes: undefined,\n    client_id: 1,\n    created_at: \"17-07-2024 04:26\",\n    total_charge: 0,\n    previous_client_debt: 10,\n    new_client_debt: 1110,\n    expense: {\n      create: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق\",\n        created_at: \"17-07-2024 04:26\"\n      }\n    },\n    income: {\n      create: {\n        flour_id: 1,\n        created_at: \"17-07-2024 04:26\",\n        profit: NaN,\n+       flour: {\n+         create: FlourCreateWithoutIncomesInput | FlourUncheckedCreateWithoutIncomesInput,\n+         connectOrCreate: FlourCreateOrConnectWithoutIncomesInput,\n+         connect: FlourWhereUniqueInput\n+       }\n      }\n    }\n  }\n}\n\nArgument `flour` is missing.","timestamp":"2024-07-17 04:26:00"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: [\n        {\n          quantity: 10,\n          created_at: \"17-07-2024 04:26\",\n          flour_id: 1,\n          client_id: 1,\n          total_out_price: 800,\n          unit_sell_price: 60\n        },\n        {\n          quantity: 20,\n          created_at: \"17-07-2024 04:26\",\n          flour_id: 2,\n          client_id: 1,\n          total_out_price: 300,\n          unit_sell_price: 13\n        }\n      ]\n    },\n    notes: undefined,\n    client_id: 1,\n    created_at: \"17-07-2024 04:26\",\n    total_charge: 0,\n    previous_client_debt: 10,\n    new_client_debt: 1110,\n    expense: {\n      create: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق\",\n        created_at: \"17-07-2024 04:26\"\n      }\n    },\n    income: {\n      create: {\n        flour: {\n          connect: {\n            id: 1\n          }\n        },\n        created_at: \"17-07-2024 04:26\",\n+       profit: Float\n      }\n    }\n  }\n}\n\nArgument `profit` is missing.","timestamp":"2024-07-17 04:26:25"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: [\n        {\n          quantity: 10,\n          created_at: \"17-07-2024 04:26\",\n          flour_id: 1,\n          client_id: 1,\n          total_out_price: 800,\n          unit_sell_price: 60\n        },\n        {\n          quantity: 20,\n          created_at: \"17-07-2024 04:26\",\n          flour_id: 2,\n          client_id: 1,\n          total_out_price: 300,\n          unit_sell_price: 13\n        }\n      ]\n    },\n    notes: undefined,\n    client_id: 1,\n    created_at: \"17-07-2024 04:26\",\n    total_charge: 0,\n    previous_client_debt: 10,\n    new_client_debt: 1110,\n    expense: {\n      create: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق\",\n        created_at: \"17-07-2024 04:26\"\n      }\n    },\n    income: {\n      create: {\n        flour: {\n          connect: {\n            id: 1\n          }\n        },\n        created_at: \"17-07-2024 04:26\",\n+       profit: Float\n      }\n    }\n  }\n}\n\nArgument `profit` is missing.","timestamp":"2024-07-17 04:26:25"}
{"level":"error","message":"\nInvalid `prisma.sale.findMany()` invocation:\n\n{\n  include: {\n    client: true,\n    expense: {\n      include: {\n        sale_id: false\n      }\n    },\n    client_id: false,\n    incomes: true,\n    ~~~~~~~\n    payments: true,\n    storage_outs: {\n      include: {\n        flour_id: false,\n        flour: true,\n        client_id: false,\n        client: false,\n        sale: false,\n        sale_id: false\n      }\n    },\n?   payment?: true,\n?   income?: true\n  }\n}\n\nUnknown field `incomes` for include statement on model `Sale`. Available options are marked with ?.","timestamp":"2024-07-17 04:27:00"}
{"level":"error","message":"\nInvalid `prisma.sale.findMany()` invocation:\n\n{\n  include: {\n    client: true,\n    expense: {\n      include: {\n        sale_id: false\n      }\n    },\n    client_id: false,\n    incomes: true,\n    ~~~~~~~\n    payments: true,\n    storage_outs: {\n      include: {\n        flour_id: false,\n        flour: true,\n        client_id: false,\n        client: false,\n        sale: false,\n        sale_id: false\n      }\n    },\n?   payment?: true,\n?   income?: true\n  }\n}\n\nUnknown field `incomes` for include statement on model `Sale`. Available options are marked with ?.","timestamp":"2024-07-17 04:27:00"}
{"level":"error","message":"\nInvalid `prisma.sale.findMany()` invocation:\n\n{\n  include: {\n    client: true,\n    expense: {\n      include: {\n        sale_id: false\n      }\n    },\n    client_id: false,\n    income: {\n      flour: true,\n      ~~~~~\n?     where?: IncomeWhereInput\n    },\n    payment: true,\n    storage_outs: {\n      include: {\n        flour_id: false,\n        flour: true,\n        client_id: false,\n        client: false,\n        sale: false\n      }\n    }\n  }\n}\n\nUnknown argument `flour`. Available options are marked with ?.","timestamp":"2024-07-17 04:38:33"}
{"level":"error","message":"\nInvalid `prisma.sale.findMany()` invocation:\n\n{\n  include: {\n    client: true,\n    expense: {\n      include: {\n        sale_id: false\n      }\n    },\n    client_id: false,\n    income: {\n      flour: true,\n      ~~~~~\n?     where?: IncomeWhereInput\n    },\n    payment: true,\n    storage_outs: {\n      include: {\n        flour_id: false,\n        flour: true,\n        client_id: false,\n        client: false,\n        sale: false\n      }\n    }\n  }\n}\n\nUnknown argument `flour`. Available options are marked with ?.","timestamp":"2024-07-17 04:38:33"}
{"level":"error","message":"Wrong password","timestamp":"2024-07-17 04:57:32"}
{"level":"error","message":"Wrong password","timestamp":"2024-07-17 04:57:32"}
{"level":"error","message":"promiseAsyncWrapper is not defined","timestamp":"2024-07-24 06:04:15"}
{"level":"error","message":"promiseAsyncWrapper is not defined","timestamp":"2024-07-24 06:04:15"}
{"level":"error","message":"\nInvalid `prisma.storageIn.create()` invocation:\n\n\nForeign key constraint failed on the field: `flour_id`","timestamp":"2024-07-24 06:10:25"}
{"level":"error","message":"\nInvalid `prisma.storageIn.create()` invocation:\n\n\nForeign key constraint failed on the field: `flour_id`","timestamp":"2024-07-24 06:10:25"}
{"level":"error","message":"\nInvalid `prisma.storageIn.findMany()` invocation:\n\n{\n  where: {\n+   flour_id: {\n+     equals: Int | IntFieldRefInput,\n+     in: Int[],\n+     notIn: Int[],\n+     lt: Int | IntFieldRefInput,\n+     lte: Int | IntFieldRefInput,\n+     gt: Int | IntFieldRefInput,\n+     gte: Int | IntFieldRefInput,\n+     not: Int | NestedIntFilter\n+   }\n  }\n}\n\nArgument `flour_id` is missing.","timestamp":"2024-07-24 06:13:26"}
{"level":"error","message":"\nInvalid `prisma.storageIn.findMany()` invocation:\n\n{\n  where: {\n+   flour_id: {\n+     equals: Int | IntFieldRefInput,\n+     in: Int[],\n+     notIn: Int[],\n+     lt: Int | IntFieldRefInput,\n+     lte: Int | IntFieldRefInput,\n+     gt: Int | IntFieldRefInput,\n+     gte: Int | IntFieldRefInput,\n+     not: Int | NestedIntFilter\n+   }\n  }\n}\n\nArgument `flour_id` is missing.","timestamp":"2024-07-24 06:13:26"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: \"[]\"\n              ~~~~\n    },\n    notes: undefined,\n    client_id: 1,\n    created_at: \"24-07-2024 06:19\",\n    total_charge: 0,\n    previous_client_debt: 10,\n    new_client_debt: 1110,\n    expense: {\n      create: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق\",\n        created_at: \"24-07-2024 06:19\"\n      }\n    },\n    income: {\n      create: {\n        flour: {\n          connect: {\n            id: 1\n          }\n        },\n        created_at: \"24-07-2024 06:19\",\n        profit: 20\n      }\n    }\n  }\n}\n\nArgument `create`: Invalid value provided. Expected StorageOutCreateWithoutSaleInput, StorageOutCreateWithoutSaleInput[], StorageOutUncheckedCreateWithoutSaleInput or StorageOutUncheckedCreateWithoutSaleInput[], provided String.","timestamp":"2024-07-24 06:19:17"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: \"[]\"\n              ~~~~\n    },\n    notes: undefined,\n    client_id: 1,\n    created_at: \"24-07-2024 06:19\",\n    total_charge: 0,\n    previous_client_debt: 10,\n    new_client_debt: 1110,\n    expense: {\n      create: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق\",\n        created_at: \"24-07-2024 06:19\"\n      }\n    },\n    income: {\n      create: {\n        flour: {\n          connect: {\n            id: 1\n          }\n        },\n        created_at: \"24-07-2024 06:19\",\n        profit: 20\n      }\n    }\n  }\n}\n\nArgument `create`: Invalid value provided. Expected StorageOutCreateWithoutSaleInput, StorageOutCreateWithoutSaleInput[], StorageOutUncheckedCreateWithoutSaleInput or StorageOutUncheckedCreateWithoutSaleInput[], provided String.","timestamp":"2024-07-24 06:19:17"}
{"level":"error","message":[{"error":"storage_outs cannot be null or empty","field":"storage_outs"},{"error":"client_id cannot be null or empty","field":"client_id"},{"error":"expense_amount cannot be null or empty","field":"expense_amount"}],"timestamp":"2024-07-24 06:48:00"}
{"level":"error","message":[{"error":"storage_outs cannot be null or empty","field":"storage_outs"},{"error":"client_id cannot be null or empty","field":"client_id"},{"error":"expense_amount cannot be null or empty","field":"expense_amount"}],"timestamp":"2024-07-24 06:48:00"}
{"level":"error","message":[{"error":"storage_outs cannot be null or empty","field":"storage_outs"},{"error":"client_id cannot be null or empty","field":"client_id"},{"error":"expense_amount cannot be null or empty","field":"expense_amount"}],"timestamp":"2024-07-24 06:48:00"}
{"level":"error","message":[{"error":"storage_outs cannot be null or empty","field":"storage_outs"},{"error":"client_id cannot be null or empty","field":"client_id"},{"error":"expense_amount cannot be null or empty","field":"expense_amount"}],"timestamp":"2024-07-24 06:48:00"}
{"level":"error","message":"\nInvalid `prisma.storageIn.create()` invocation:\n\n{\n  data: {\n    stock: 73,\n    flour_id: 5,\n    unit_purchase_price: 11,\n    total_purchase_price: 803,\n    package_number: \"93x2c4vLqOgM\",\n                    ~~~~~~~~~~~~~~\n    created_at: \"24-07-2024 13:16\"\n  }\n}\n\nArgument `package_number`: Invalid value provided. Expected Int, provided String.","timestamp":"2024-07-24 13:16:09"}
{"level":"error","message":"\nInvalid `prisma.storageIn.create()` invocation:\n\n{\n  data: {\n    stock: 73,\n    flour_id: 5,\n    unit_purchase_price: 11,\n    total_purchase_price: 803,\n    package_number: \"93x2c4vLqOgM\",\n                    ~~~~~~~~~~~~~~\n    created_at: \"24-07-2024 13:16\"\n  }\n}\n\nArgument `package_number`: Invalid value provided. Expected Int, provided String.","timestamp":"2024-07-24 13:16:09"}
{"level":"error","message":"\nInvalid `prisma.storageIn.create()` invocation:\n\n{\n  data: {\n    stock: 73,\n    flour_id: 5,\n    unit_purchase_price: 11,\n    total_purchase_price: 803,\n    package_number: \"104405952478\",\n                    ~~~~~~~~~~~~~~\n    created_at: \"24-07-2024 13:16\"\n  }\n}\n\nArgument `package_number`: Invalid value provided. Expected Int, provided String.","timestamp":"2024-07-24 13:16:58"}
{"level":"error","message":"\nInvalid `prisma.storageIn.create()` invocation:\n\n{\n  data: {\n    stock: 73,\n    flour_id: 5,\n    unit_purchase_price: 11,\n    total_purchase_price: 803,\n    package_number: \"104405952478\",\n                    ~~~~~~~~~~~~~~\n    created_at: \"24-07-2024 13:16\"\n  }\n}\n\nArgument `package_number`: Invalid value provided. Expected Int, provided String.","timestamp":"2024-07-24 13:16:58"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n\nForeign key constraint failed on the field: `client_id`","timestamp":"2024-07-24 14:40:23"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n\nForeign key constraint failed on the field: `client_id`","timestamp":"2024-07-24 14:40:23"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n\nAn operation failed because it depends on one or more records that were required but not found. No 'Flour' record(s) (needed to inline the relation on 'Income' record(s)) was found for a nested connect on one-to-many relation 'FlourToIncome'.","timestamp":"2024-07-24 14:40:45"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n\nAn operation failed because it depends on one or more records that were required but not found. No 'Flour' record(s) (needed to inline the relation on 'Income' record(s)) was found for a nested connect on one-to-many relation 'FlourToIncome'.","timestamp":"2024-07-24 14:40:45"}
{"level":"error","message":"Cannot destructure property 'stock' of 'next_package' as it is null.","timestamp":"2024-07-24 16:35:21"}
{"level":"error","message":"Cannot destructure property 'stock' of 'next_package' as it is null.","timestamp":"2024-07-24 16:35:21"}
{"level":"error","message":"Insufficient stock requested 1000 of درجة أولي but found 949","timestamp":"2024-07-24 18:17:38"}
{"level":"error","message":"Insufficient stock requested 1000 of درجة أولي but found 949","timestamp":"2024-07-24 18:17:38"}
{"level":"error","message":"Insufficient stock requested 1000 of درجة ثانية but found 292","timestamp":"2024-07-24 18:18:23"}
{"level":"error","message":"Insufficient stock requested 1000 of درجة ثانية but found 292","timestamp":"2024-07-24 18:18:23"}
{"level":"error","message":"لم يتوفر المخزن من درجة ثانية عدد 1000 بكمل من المخزن 292","timestamp":"2024-07-24 18:18:55"}
{"level":"error","message":"لم يتوفر المخزن من درجة ثانية عدد 1000 بكمل من المخزن 292","timestamp":"2024-07-24 18:18:55"}
{"level":"error","message":"الكمية المطلوبة من درجة ثانية هي 1000 ولكن الكمية المتوفرة هي 292","timestamp":"2024-07-24 18:20:00"}
{"level":"error","message":"الكمية المطلوبة من درجة ثانية هي 1000 ولكن الكمية المتوفرة هي 292","timestamp":"2024-07-24 18:20:00"}
{"level":"error","message":"promiseAsyncWrapper is not defined","timestamp":"2024-07-25 10:02:58"}
{"level":"error","message":"promiseAsyncWrapper is not defined","timestamp":"2024-07-25 10:02:58"}
{"level":"error","message":"Cannot destructure property 'stock' of 'next_package' as it is null.","timestamp":"2024-07-25 14:17:09"}
{"level":"error","message":"Cannot destructure property 'stock' of 'next_package' as it is null.","timestamp":"2024-07-25 14:17:09"}
{"level":"error","message":"Cannot destructure property 'stock' of 'next_package' as it is null.","timestamp":"2024-07-25 14:18:38"}
{"level":"error","message":"Cannot destructure property 'stock' of 'next_package' as it is null.","timestamp":"2024-07-25 14:18:38"}
{"level":"error","message":"Cannot destructure property 'stock' of 'next_package' as it is null.","timestamp":"2024-07-25 14:19:50"}
{"level":"error","message":"Cannot destructure property 'stock' of 'next_package' as it is null.","timestamp":"2024-07-25 14:19:50"}
{"level":"error","message":"Invalid quantity provided","timestamp":"2024-07-25 14:22:06"}
{"level":"error","message":"Invalid quantity provided","timestamp":"2024-07-25 14:22:06"}
{"level":"error","message":"Invalid quantity provided","timestamp":"2024-07-25 14:23:27"}
{"level":"error","message":"Invalid quantity provided","timestamp":"2024-07-25 14:23:27"}
{"level":"error","message":"Invalid quantity provided","timestamp":"2024-07-25 14:24:05"}
{"level":"error","message":"Invalid quantity provided","timestamp":"2024-07-25 14:24:05"}
{"level":"error","message":"Assignment to constant variable.","timestamp":"2024-07-25 14:24:50"}
{"level":"error","message":"Assignment to constant variable.","timestamp":"2024-07-25 14:24:50"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: [\n        {\n          quantity: 4,\n          client_price: 4,\n          total_client_charge: 16,\n          client_id: 6,\n          flour_id: 5,\n          storage_in_id: 20,\n          created_at: \"25-07-2024 14:26\"\n        }\n      ]\n    },\n    notes: \"\",\n    client_id: 6,\n    created_at: \"25-07-2024 14:26\",\n    total_charge: 16,\n    previous_client_debt: 666.01,\n    new_client_debt: 682.01,\n    expense: {\n      create: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق لتسديد ديون\",\n        created_at: \"25-07-2024 14:26\"\n      }\n    },\n    payment: {\n      create: {\n        amount: 11,\n        created_at: \"25-07-2024 14:26\",\n        ~~~~~~~~~~\n        client_id: 6,\n        paid_at: \"25-07-2024 14:26\",\n?       id?: Int,\n?       note?: String | Null\n      }\n    }\n  }\n}\n\nUnknown argument `created_at`. Available options are marked with ?.","timestamp":"2024-07-25 14:26:14"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: [\n        {\n          quantity: 4,\n          client_price: 4,\n          total_client_charge: 16,\n          client_id: 6,\n          flour_id: 5,\n          storage_in_id: 20,\n          created_at: \"25-07-2024 14:26\"\n        }\n      ]\n    },\n    notes: \"\",\n    client_id: 6,\n    created_at: \"25-07-2024 14:26\",\n    total_charge: 16,\n    previous_client_debt: 666.01,\n    new_client_debt: 682.01,\n    expense: {\n      create: {\n        total_amount: 20,\n        reason: \"دفع مبلغ مع عملية شراء دقيق لتسديد ديون\",\n        created_at: \"25-07-2024 14:26\"\n      }\n    },\n    payment: {\n      create: {\n        amount: 11,\n        created_at: \"25-07-2024 14:26\",\n        ~~~~~~~~~~\n        client_id: 6,\n        paid_at: \"25-07-2024 14:26\",\n?       id?: Int,\n?       note?: String | Null\n      }\n    }\n  }\n}\n\nUnknown argument `created_at`. Available options are marked with ?.","timestamp":"2024-07-25 14:26:14"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n\nForeign key constraint failed on the field: `storage_in_id`","timestamp":"2024-07-25 14:26:46"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n\nForeign key constraint failed on the field: `storage_in_id`","timestamp":"2024-07-25 14:26:46"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n\nForeign key constraint failed on the field: `storage_in_id`","timestamp":"2024-07-25 14:28:58"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n\nForeign key constraint failed on the field: `storage_in_id`","timestamp":"2024-07-25 14:28:58"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n\nForeign key constraint failed on the field: `storage_in_id`","timestamp":"2024-07-25 14:30:45"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n\nForeign key constraint failed on the field: `storage_in_id`","timestamp":"2024-07-25 14:30:45"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n\nForeign key constraint failed on the field: `storage_in_id`","timestamp":"2024-07-25 14:38:27"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n\nForeign key constraint failed on the field: `storage_in_id`","timestamp":"2024-07-25 14:38:27"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: [\n        {\n          quantity: 21,\n          client_price: 2,\n          total_client_charge: 42,\n          client_id: 5,\n          flour_id: 5,\n          storage_in_id: 24,\n          created_at: \"25-07-2024 15:03\"\n        }\n      ]\n    },\n    notes: \"\",\n    client_id: 5,\n    created_at: \"25-07-2024 15:03\",\n    total_charge: 42,\n    previous_client_debt: 899.91,\n    new_client_debt: 941.91,\n    expense: {\n      create: {\n        total_amount: 80,\n        reason: \"دفع مبلغ مع عملية شراء دقيق لتسديد ديون\",\n        created_at: \"25-07-2024 15:03\"\n      }\n    },\n    payment: {\n      create: {\n        amount: 12,\n        client_id: 5,\n        paid_at: \"25-07-2024 15:03\"\n      }\n    },\n    income: {\n      create: [\n        {\n          flour_id: 5,\n          profit: 168\n        }\n      ]\n      ~~~~~~~~~~~~~~~\n    }\n  }\n}\n\nArgument `create`: Invalid value provided. Expected IncomeCreateWithoutSaleInput or IncomeUncheckedCreateWithoutSaleInput, provided (Object).","timestamp":"2024-07-25 15:03:20"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: [\n        {\n          quantity: 21,\n          client_price: 2,\n          total_client_charge: 42,\n          client_id: 5,\n          flour_id: 5,\n          storage_in_id: 24,\n          created_at: \"25-07-2024 15:03\"\n        }\n      ]\n    },\n    notes: \"\",\n    client_id: 5,\n    created_at: \"25-07-2024 15:03\",\n    total_charge: 42,\n    previous_client_debt: 899.91,\n    new_client_debt: 941.91,\n    expense: {\n      create: {\n        total_amount: 80,\n        reason: \"دفع مبلغ مع عملية شراء دقيق لتسديد ديون\",\n        created_at: \"25-07-2024 15:03\"\n      }\n    },\n    payment: {\n      create: {\n        amount: 12,\n        client_id: 5,\n        paid_at: \"25-07-2024 15:03\"\n      }\n    },\n    income: {\n      create: [\n        {\n          flour_id: 5,\n          profit: 168\n        }\n      ]\n      ~~~~~~~~~~~~~~~\n    }\n  }\n}\n\nArgument `create`: Invalid value provided. Expected IncomeCreateWithoutSaleInput or IncomeUncheckedCreateWithoutSaleInput, provided (Object).","timestamp":"2024-07-25 15:03:20"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: [\n        {\n          quantity: 21,\n          client_price: 2,\n          total_client_charge: 42,\n          client_id: 5,\n          flour_id: 5,\n          storage_in_id: 24,\n          created_at: \"25-07-2024 15:05\"\n        }\n      ]\n    },\n    notes: \"\",\n    client_id: 5,\n    created_at: \"25-07-2024 15:05\",\n    total_charge: 42,\n    previous_client_debt: 899.91,\n    new_client_debt: 941.91,\n    expense: {\n      create: {\n        total_amount: 80,\n        reason: \"دفع مبلغ مع عملية شراء دقيق لتسديد ديون\",\n        created_at: \"25-07-2024 15:05\"\n      }\n    },\n    payment: {\n      create: {\n        amount: 21,\n        client_id: 5,\n        paid_at: \"25-07-2024 15:05\"\n      }\n    },\n    income: {\n      create: [\n        {\n          flour_id: 5,\n          profit: 168\n        }\n      ]\n    }\n  }\n}\n\nArgument `created_at` is missing.","timestamp":"2024-07-25 15:05:12"}
{"level":"error","message":"\nInvalid `prisma.sale.create()` invocation:\n\n{\n  data: {\n    storage_outs: {\n      create: [\n        {\n          quantity: 21,\n          client_price: 2,\n          total_client_charge: 42,\n          client_id: 5,\n          flour_id: 5,\n          storage_in_id: 24,\n          created_at: \"25-07-2024 15:05\"\n        }\n      ]\n    },\n    notes: \"\",\n    client_id: 5,\n    created_at: \"25-07-2024 15:05\",\n    total_charge: 42,\n    previous_client_debt: 899.91,\n    new_client_debt: 941.91,\n    expense: {\n      create: {\n        total_amount: 80,\n        reason: \"دفع مبلغ مع عملية شراء دقيق لتسديد ديون\",\n        created_at: \"25-07-2024 15:05\"\n      }\n    },\n    payment: {\n      create: {\n        amount: 21,\n        client_id: 5,\n        paid_at: \"25-07-2024 15:05\"\n      }\n    },\n    income: {\n      create: [\n        {\n          flour_id: 5,\n          profit: 168\n        }\n      ]\n    }\n  }\n}\n\nArgument `created_at` is missing.","timestamp":"2024-07-25 15:05:12"}
{"level":"error","message":[{"error":"expense_amount cannot be null or empty","field":"expense_amount"}],"timestamp":"2024-07-25 16:19:15"}
{"level":"error","message":[{"error":"expense_amount cannot be null or empty","field":"expense_amount"}],"timestamp":"2024-07-25 16:19:15"}
{"level":"error","message":[{"error":"expense_amount cannot be null or empty","field":"expense_amount"}],"timestamp":"2024-07-25 16:20:00"}
{"level":"error","message":[{"error":"expense_amount cannot be null or empty","field":"expense_amount"}],"timestamp":"2024-07-25 16:20:00"}
{"level":"error","message":"\nInvalid `prisma.sale.findMany()` invocation:\n\n\nCan't reach database server at `localhost:3306`\n\nPlease make sure your database server is running at `localhost:3306`.","timestamp":"2024-07-26 13:23:03"}
{"level":"error","message":"\nInvalid `prisma.sale.findMany()` invocation:\n\n\nCan't reach database server at `localhost:3306`\n\nPlease make sure your database server is running at `localhost:3306`.","timestamp":"2024-07-26 13:23:03"}
{"level":"error","message":[{"error":"expense_amount cannot be null or empty","field":"expense_amount"}],"timestamp":"2024-07-26 14:02:10"}
{"level":"error","message":[{"error":"expense_amount cannot be null or empty","field":"expense_amount"}],"timestamp":"2024-07-26 14:02:10"}
{"level":"error","message":"moment is not defined","timestamp":"2024-07-30 15:03:35"}
{"level":"error","message":"moment is not defined","timestamp":"2024-07-30 15:03:35"}
{"level":"error","message":"\nInvalid `prisma.expense.findMany()` invocation:\n\n\nCan't reach database server at `localhost:3306`\n\nPlease make sure your database server is running at `localhost:3306`.","timestamp":"2024-07-30 16:21:22"}
{"level":"error","message":"\nInvalid `prisma.expense.findMany()` invocation:\n\n\nCan't reach database server at `localhost:3306`\n\nPlease make sure your database server is running at `localhost:3306`.","timestamp":"2024-07-30 16:21:22"}
